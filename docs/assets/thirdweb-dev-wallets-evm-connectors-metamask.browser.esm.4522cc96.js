import{aJ as C,aI as u,aR as m,aK as I,aL as y,aS as P,aU as A,aZ as E,aQ as S,a_ as U}from"./index.58457bc4.js";import{W,a as d,U as l,R as v,C as D,g as _,A as q,S as R}from"./url-bc88b2b6.browser.esm.ee1c6231.js";import{n as p}from"./normalizeChainId-e4cc0175.browser.esm.042707b7.js";function k(h){var n,s,r;if(!h)return"Injected";const t=e=>{if(e.isAvalanche)return"Core Wallet";if(e.isBitKeep)return"BitKeep";if(e.isBraveWallet)return"Brave Wallet";if(e.isCoinbaseWallet)return"Coinbase Wallet";if(e.isExodus)return"Exodus";if(e.isFrame)return"Frame";if(e.isKuCoinWallet)return"KuCoin Wallet";if(e.isMathWallet)return"MathWallet";if(e.isOneInchIOSWallet||e.isOneInchAndroidWallet)return"1inch Wallet";if(e.isOpera)return"Opera";if(e.isPortal)return"Ripio Portal";if(e.isTally)return"Tally";if(e.isTokenPocket)return"TokenPocket";if(e.isTokenary)return"Tokenary";if(e.isTrust||e.isTrustWallet)return"Trust Wallet";if(e.isMetaMask)return"MetaMask"};if((n=h.providers)!=null&&n.length){const e=new Set;let i=1;for(const a of h.providers){let c=t(a);c||(c=`Unknown Wallet #${i}`,i+=1),e.add(c)}const o=[...e];return o.length?o:(s=o[0])!=null?s:"Injected"}return(r=t(h))!=null?r:"Injected"}var w=new WeakMap;class j extends W{constructor(t){const s={...{shimDisconnect:!0,getProvider:()=>{if(E(globalThis.window))return globalThis.window.ethereum}},...t.options};super({chains:t.chains,options:s}),C(this,w,{writable:!0,value:void 0}),u(this,"shimDisconnectKey","injected.shimDisconnect"),u(this,"onAccountsChanged",async e=>{e.length===0?this.emit("disconnect"):this.emit("change",{account:m(e[0])})}),u(this,"onChainChanged",e=>{const i=p(e),o=this.isChainUnsupported(i);this.emit("change",{chain:{id:i,unsupported:o}})}),u(this,"onDisconnect",async e=>{if(e.code===1013&&await this.getProvider())try{if(await this.getAccount())return}catch{}this.emit("disconnect"),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey)});const r=s.getProvider();if(typeof s.name=="string")this.name=s.name;else if(r){const e=k(r);s.name?this.name=s.name(e):typeof e=="string"?this.name=e:this.name=e[0]}else this.name="Injected";this.id="injected",this.ready=!!r,this.connectorStorage=t.connectorStorage}async connect(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const n=await this.getProvider();if(!n)throw new d;this.setupListeners(),this.emit("message",{type:"connecting"});const s=await n.request({method:"eth_requestAccounts"}),r=m(s[0]);let e=await this.getChainId(),i=this.isChainUnsupported(e);if(t.chainId&&e!==t.chainId)try{await this.switchChain(t.chainId),e=t.chainId,i=this.isChainUnsupported(t.chainId)}catch(a){console.error(`Could not switch to chain id: ${t.chainId}`,a)}this.options.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const o={account:r,chain:{id:e,unsupported:i},provider:n};return this.emit("connect",o),o}catch(n){throw this.isUserRejectedRequestError(n)?new l(n):n.code===-32002?new v(n):n}}async disconnect(){const t=await this.getProvider();!(t!=null&&t.removeListener)||(t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey))}async getAccount(){const t=await this.getProvider();if(!t)throw new d;const n=await t.request({method:"eth_accounts"});return m(n[0])}async getChainId(){const t=await this.getProvider();if(!t)throw new d;return t.request({method:"eth_chainId"}).then(p)}async getProvider(){const t=this.options.getProvider();return t&&I(this,w,t),y(this,w)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[n,s]=await Promise.all([this.getProvider(),this.getAccount()]);return new P(n,t).getSigner(s)}async isAuthorized(){try{if(this.options.shimDisconnect&&!Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey)))return!1;if(!await this.getProvider())throw new d;return!!await this.getAccount()}catch{return!1}}async switchChain(t){var r,e;const n=await this.getProvider();if(!n)throw new d;const s=A(t);try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:s}]});const i=this.chains.find(o=>o.chainId===t);return i||{chainId:t,name:`Chain ${s}`,slug:`${s}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],chain:"",shortName:"",testnet:!0}}catch(i){const o=this.chains.find(a=>a.chainId===t);if(!o)throw new D({chainId:t,connectorId:this.id});if(i.code===4902||((e=(r=i==null?void 0:i.data)==null?void 0:r.originalError)==null?void 0:e.code)===4902)try{return await n.request({method:"wallet_addEthereumChain",params:[{chainId:s,chainName:o.name,nativeCurrency:o.nativeCurrency,rpcUrls:_(o),blockExplorerUrls:this.getBlockExplorerUrls(o)}]}),o}catch(a){throw this.isUserRejectedRequestError(a)?new l(i):new q}throw this.isUserRejectedRequestError(i)?new l(i):new R(i)}}async setupListeners(){const t=await this.getProvider();t.on&&(t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect))}isUserRejectedRequestError(t){return t.code===4001}}var g=new WeakMap;class b extends j{constructor(t){const s={...{name:"MetaMask",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:U},...t.options};super({chains:t.chains,options:s,connectorStorage:t.connectorStorage}),u(this,"id",S.metamask),C(this,g,{writable:!0,value:void 0}),I(this,g,s.UNSTABLE_shimOnConnectSelectAccount)}async connect(){var n,s;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const r=await this.getProvider();if(!r)throw new d;this.setupListeners(),this.emit("message",{type:"connecting"});let e=null;if(y(this,g)&&((n=this.options)==null?void 0:n.shimDisconnect)&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))&&(e=await this.getAccount().catch(()=>null),!!e))try{await r.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(f){if(this.isUserRejectedRequestError(f))throw new l(f)}if(!e){const c=await r.request({method:"eth_requestAccounts"});e=m(c[0])}let i=await this.getChainId(),o=this.isChainUnsupported(i);if(t.chainId&&i!==t.chainId)try{await this.switchChain(t.chainId),i=t.chainId,o=this.isChainUnsupported(t.chainId)}catch(c){console.error(`Could not switch to chain id : ${t.chainId}`,c)}(s=this.options)!=null&&s.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const a={chain:{id:i,unsupported:o},provider:r,account:e};return this.emit("connect",a),a}catch(r){throw this.isUserRejectedRequestError(r)?new l(r):r.code===-32002?new v(r):r}}async switchAccount(){await(await this.getProvider()).request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}export{b as MetaMaskConnector};
